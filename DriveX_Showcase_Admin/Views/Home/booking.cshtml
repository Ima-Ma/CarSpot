@Html.Partial("Header")
@model IEnumerable<DriveX_Showcase_Admin.Models.Booking_Form>

<div class="main-panel">
    <div class="content-wrapper">
        <div class="col-lg-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Booking Records</h4>

                    <!-- Filter Dropdown -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <select id="statusFilter" class="form-control">
                                <option value="all">All</option>
                                <option value="pending">Pending</option>
                                <option value="responded">Responded</option>
                                <option value="confirmed">Confirmed</option>
                            </select>
                        </div>
                    </div>

                    <!-- Table -->
                    <div class="table-responsive pt-3">
                        <table class="table table-bordered" id="dataTable">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Car Name</th>
                                    <th>Dealer Name</th>
                                    <th>Full Name</th>
                                    <th>Phone Number</th>
                                    <th>Message</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="tableBody">
                                @foreach (var items in Model)
                                {
                                    <tr>
                                        <td>@items.id</td>
                                        <td>@items.car_name</td>
                                        <td>@items.dealer_name</td>
                                        <td>@items.full_name</td>
                                        <td>@items.phone_number</td>
                                        <td>@items.message</td>
                                        <td>@items.status</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination Buttons -->
                    <div class="mt-3 text-center">
                        <button id="prevPage" class="btn btn-primary">Previous</button>
                        <button id="nextPage" class="btn btn-primary">Next</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Html.Partial("Footer")

<!-- CSS -->
<style>
    .form-control {
        margin-bottom: 15px;
    }

    .table th,
    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .btn {
        margin: 5px;
    }

    .table  th {
        color: white;
        background-color: #6610f2;
    }
</style>

<!-- JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; // Rows per page
        const tableBody = document.getElementById("tableBody");
        const allRows = Array.from(tableBody.rows);
        const filterDropdown = document.getElementById("statusFilter");
        const prevPageBtn = document.getElementById("prevPage");
        const nextPageBtn = document.getElementById("nextPage");

        let currentPage = 1;
        let filteredRows = allRows;

        // Function to render the table
        function renderTable(rows) {
            tableBody.innerHTML = ""; // Clear table
            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            rows.slice(start, end).forEach(row => tableBody.appendChild(row));

            // Disable/Enable pagination buttons
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = end >= rows.length;
        }

        // Function to filter rows
        function filterTable() {
            const filterValue = filterDropdown.value.toLowerCase();
            filteredRows = filterValue === "all"
                ? allRows
                : allRows.filter(row => row.cells[6].textContent.toLowerCase() === filterValue);
            currentPage = 1; // Reset to first page
            renderTable(filteredRows);
        }

        // Event listener for the filter dropdown
        filterDropdown.addEventListener("change", filterTable);

        // Pagination buttons
        prevPageBtn.addEventListener("click", function () {
            if (currentPage > 1) {
                currentPage--;
                renderTable(filteredRows);
            }
        });

        nextPageBtn.addEventListener("click", function () {
            if (currentPage * rowsPerPage < filteredRows.length) {
                currentPage++;
                renderTable(filteredRows);
            }
        });

        // Initial Render
        renderTable(filteredRows);
    });
</script>
